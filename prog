#!/bin/sh -e
# -*- coding: utf-8; mode: sh; tab-width: 3; indent-tabs-mode: nil -*-
#
# Copyright 2017 Raffaello D. Di Napoli
#
# This file is part of RAWR.
#
# RAWR is free software: you can redistribute it and/or modify it under the terms of version 2.1 of the GNU
# Lesser General Public License as published by the Free Software Foundation.
#
# RAWR is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
# for more details.
#-------------------------------------------------------------------------------------------------------------

rawr_dir="${0%/*}"
cmd="${1}"
shift
if [ -z "${cmd}" ]; then
   echo 'no command specified; please specify one of: build write clean'
   exit 1;
fi

# Constants.
asm_dir=asm
bin_dir=bin
hex_dir=hex
int_dir=int

if [ "${cmd}" = clean ]; then
   rm -rf "${asm_dir}" "${bin_dir}" "${hex_dir}" "${int_dir}"
   exit 0
fi

if [ "${#}" -eq 0 ]; then
   echo 'no source files specified'
   exit 1;
fi
# Generate a name for the program from the first source file name, stripping its path and suffix.
prog_name="${1##*/}"
prog_name="${prog_name%.*}"
# Extract the µCU from first line containing “MCU” in any of the source files.
src_mcu_def=$(awk '
   /[\t ]MCU[\t ]*[0-9A-Za-z]+/ {
      sub(/[^0-9A-Za-z]*$/, "")
      sub(/^.*MCU */, "")
      print tolower($0)
      exit
   }
   FNR > 50 {
      nextfile
   }
' "${@}")
if [ -z "${src_mcu_def}" ]; then
   echo 'please declare the target MCU in one of the source files with a #define or a comment, like:'
   echo '   #define MCU ATtiny13A'
   echo '   /* MCU ATtiny48 */'
   echo '   // MCU ATmega328P'
   exit 1
fi

# Computed constants.
bin_asm_file="${asm_dir}/${prog_name}.s"
bin_file="${bin_dir}/${prog_name}"
hex_file="${hex_dir}/${prog_name}.hex"

# Overridables.
WARN_CFLAGS="${WARN_CFLAGS:-} -Wall"                  # Enable more warnings.
WARN_CFLAGS="${WARN_CFLAGS:-} -Wextra"                # Enable extra warnings not enabled by -Wall.
WARN_CFLAGS="${WARN_CFLAGS:-} -pedantic"              # Issue all the warnings demanded by strict ISO C++.
WARN_CFLAGS="${WARN_CFLAGS:-} -Wconversion"           # Warn for implicit conversions that may alter a value.
WARN_CFLAGS="${WARN_CFLAGS:-} -Wlogical-op"           # Warn about suspicious uses of logical operators in
                                                      # expressions.
WARN_CFLAGS="${WARN_CFLAGS:-} -Wmissing-declarations" # Warn if a global function is defined without a
                                                      # previous declaration.
WARN_CFLAGS="${WARN_CFLAGS:-} -Wpacked"               # Warn if a struct has “packed” attribute but that
                                                      # has no effect on its layout or size.
WARN_CFLAGS="${WARN_CFLAGS:-} -Wshadow"               # Warn when a local symbol shadows another symbol.
WARN_CFLAGS="${WARN_CFLAGS:-} -Wsign-conversion"      # Warn for implicit conversions that may change the sign
                                                      # of an integer value.
WARN_CFLAGS="${WARN_CFLAGS:-} -Wundef"                # Warn if an undefined identifier is evaluated in “#if”.
CFLAGS="-I${rawr_dir}/include ${CFLAGS}"
CFLAGS="-fno-fat-lto-objects -g0 -Os ${WARN_CFLAGS} ${CFLAGS}"
CFLAGS="-std=c++14 -fvisibility=internal ${CFLAGS}"
# Change to false to link against avr-libc’s startup files for maximum compatibility.
if true; then
   CFLAGS="-DRAWR_STARTUP ${CFLAGS}"
   LDFLAGS="-nostartfiles ${LDFLAGS}"
fi
unset WARN_CFLAGS

is_gentoo() {
   [ $(. /etc/os-release && echo "${ID}") = gentoo ]
}

if is_gentoo; then
   for d in /usr/avr/lib/*; do
      if [ -d "${d}" ]; then
         LDFLAGS="${LDFLAGS} -L${d}"
      fi
   done
   LDFLAGS="${LDFLAGS} -L/usr/avr/lib"
fi

##############################################################################################################

lastmtime() {
   stat -Lc'%Y' "${1}" 2>/dev/null || echo 0
}

older_than_any() {
   #return 0
   local source target_lastmtime="$(lastmtime "${1}")"
   shift
   for source; do
      if [ $(lastmtime "${source}") -ge ${target_lastmtime} ]; then
         return 0
      fi
   done
   return 1
}

build() {
   local gcc_mcu=$(
      echo ${src_mcu_def} |
      sed -ne '
         p
      '
   )
   CFLAGS="-mmcu=${gcc_mcu} ${CFLAGS}"

   mkdir "${asm_dir}" "${int_dir}" 2>/dev/null || true

   local int_file src_file src_asm_file
   for src_file; do
      int_file="${int_dir}/${src_file##*/}.o"
      if older_than_any "${int_file}" "${src_file}"; then
         echo "Compiling ${src_file}"
         case "${src_file##*.}" in
         (s|S)
            ;;
         (*)
            src_asm_file="${asm_dir}/${src_file##*/}.s"
            avr-g++ ${CFLAGS} -S -o "${src_asm_file}" "${src_file}"
            ;;
         esac
         avr-g++ ${CFLAGS} -c -o "${int_file}" "${src_file}"
      fi
   done

   # Needed patch for e.g. /usr/lib/gcc/avr/5.4.0/device-specs/specs-attiny4313 :
   #  *avrlibc_startfile:
   # -   crtattiny4313.o%s
   # +   /usr/avr/lib/avr25/crtattiny4313.o%s
   #
   #  *avrlibc_devicelib:
   # -   %{!nodevicelib:-lattiny4313}
   # +   %{!nodevicelib:-L/usr/avr/lib/avr25 -lattiny4313}

   echo "Linking ${bin_file}"
   mkdir "${bin_dir}" 2>/dev/null || true
   {
      for src_file; do
         echo "${int_dir}/${src_file##*/}.o"
      done
      for lib in ${LDLIBS}; do
         printf '%s\n' "${lib}"
      done
   } |
   xargs avr-g++ ${CFLAGS} ${LDFLAGS} -o "${bin_file}"

   echo "Generating ${bin_asm_file}"
   avr-objdump -CS "${bin_file}" >"${bin_asm_file}"

   echo "Generating ${hex_file}"
   mkdir "${hex_dir}" 2>/dev/null || true
   avr-objcopy -j .text -j .data -O ihex "${bin_file}" "${hex_file}"
   awk <"${hex_file}" '
      function hex_value(hex_number,    i, ret) {
         hex_number = tolower(hex_number)
         ret = 0
         for (i = 1; i <= length(hex_number); ++i) {
            ret = ret * 16 + index("0123456789abcdef", substr(hex_number, i, 1)) - 1
         }
         return ret
      }

      /^:[A-fa-f0-9]{2}/ {
         size = hex_value(substr($0, 2, 2)) + size
      }
      END {
         print "  Size: " size " bytes"
      }
   '
}

write_flash() {
   local part=$(
      echo ${src_mcu_def} |
      sed -ne '
         s/attiny/t/p; t
         s/atmega/m/p; t
      '
   )
   while ! avrdude -p"${part}" -U flash:w:"${hex_file}"; do
      echo "avrdude failed (${?}); trying again"
      sleep 0.25
   done
}

##############################################################################################################

if [ "${cmd}" = build -o "${cmd}" = write ]; then
   if older_than_any "${hex_file}" "${@}"; then
      build "${@}"
   fi
fi
if [ "${cmd}" = write ]; then
   write_flash
fi
